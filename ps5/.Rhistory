getwd()
setwd("C:/Users/Joanne Chen/Documents/Github/Problem-Sets/ps5")
### *** LastFM play counts *** ###
lastfm <- read.csv("lastfm.csv")
lastfm$user <- factor(lastfm$user)
library(arules)
playlists <- split(x=lastfm$artist, f=lastfm$user)
## re-move artist repretition in these lists
playlists <- lapply(playlists, unique)
## tell R to treat this as a special arules `transactions' class.
playtrans <- as(playlists, "transactions")
musicrules <- apriori(playtrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
inspect(musicrules)
Pairwise <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=3))
actnet <- read.graph("actors.graphml",format="graphml")
### TRANSACTION
## read in the table of actor ids for movies
## this is a bit complex, because the movie names
## contain all sorts of special characters.
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
library(igraph)
actnet <- read.graph("actors.graphml",format="graphml")
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
## it's a 1 column matrix.  treat it like a vector
movies <- drop(as.matrix(movies))
## each element is a comma-separated set of actor ids.
## use `strsplit' to break these out
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
## check it
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
castsize <- unlist(lapply(casts, function(m) length(m)))
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
getwd()
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
movies <- read.table("movies.txt", sep="\t",
row.names=1, as.is=TRUE, comment.char="", quote="")
movies <- drop(as.matrix(movies))
movies <- strsplit(movies,",")
## and finally, match ids to names from actnet
casts <- lapply(movies,
function(m) V(actnet)$name[match(m,V(actnet)$id)])
casts['True Romance']
## format as arules transaction baskets
library(arules)
casttrans <- as(casts, "transactions")
## Set up STM information
castsize <- unlist(lapply(casts, function(m) length(m)))
## see ?rep.int: we're just repeating movie names for each cast member
acti <- factor(rep.int(names(casts),times=castsize))
## actors
actj <- factor(unlist(casts), levels=V(actnet)$name)
## format as STM (if you specify without `x', its binary 0/1)
actmat <- sparseMatrix(i=as.numeric(acti),j=as.numeric(actj),
dimnames=list(movie=levels(acti),actor=levels(actj)))
## count the number of appearences by actor
nroles <- colSums(actmat)
names(nroles) <- colnames(actmat)
Pairwise <- apriori(casttrans,
parameter=list(support=.01, confidence=.1, maxlen=3))
inspect(Pairwise)
actmat
nroles
casttrans
playtrans
Pairwise <- apriori(casttrans,
parameter=list(support=.01, confidence=.1))
inspect(Pairwise)
casts['True Romance']
actmat
nroles <- colSums(actmat)
nroles
names(nroles) <- colnames(actmat)
nroles
Pairwise <- apriori(casts,
parameter=list(support=.01, confidence=.1))
inspect(Pairwise)
movies
casts
casttrans
casts
castsize
acti
actj
actmat
acti
actj
nroles
casts
playlists <- split(x=lastfm$artist, f=lastfm$user)
playlists
playlists <- lapply(playlists, unique)
playtrans <- as(playlists, "transactions")
musicrules <- apriori(playtrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
inspect(musicrules)
playtrans
playtrans[1]
playtrans[[1]
]
playtrans[1:]
playtrans[1]
casts
actmat
actm[,1:5]
actmat[1,]
Pairwise <- apriori(casttrans, parameter=list(support=.01, confidence=1))
Pairwise <- apriori(casttrans, parameter=list(support=.01, confidence=.1))
Pairwise <- apriori(casttrans)
inspect(Pairwise)
test <- apriori(casttrans)
inspect(test)
playlists <- split(x=lastfm$artist, f=lastfm$user)
playlists <- lapply(playlists, unique)
playlists
playtrans <- as(playlists, "transactions")
casts
playlists
casts
library(arules)
casttrans <- as(casts, "transactions")
rules <- apriori(casttrans, parameter=list(support=.01, confidence=.1, maxlen=10))
musicrules <- apriori(playtrans,
parameter=list(support=.01, confidence=.5, maxlen=3))
rules <- apriori(casttrans, parameter=list(support=.01, confidence=.1, maxlen=10))
rules <- apriori(casttrans, parameter=list(support=.001, confidence=.1, maxlen=10))
inspect(test)
inspect(rules)
rules <- apriori(casttrans, parameter=list(support=.001, confidence=.1)
)
inspect(rules)
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.1))
inspect(ARules)
casts
casts(<2)
casts("<2")
which.casts(<2)
which.casts("<2")
castsize
castsize<2
which.min(castsize)
which.max(castsize)
which.min(nroles)
casts <2
casts < 2
castsize <2
movies["Sen, Sener"]
acti["Sen, Sener"]
actj["Sen, Sener"]
actmat["Sen, Sener"]
nroles("Simmons, Richard (I)")
nroles["Simmons, Richard (I)"]
nroles["Aso, Usagi"]
casts["Aso, Usagi"]
castsize["Aso Usagi"]
castsize["True Romance"]
actnet["Aso Usagi"]
actnet[["1"]]
actnet[[1]]
actnet["Usagi, Aso"
]
which(V(actnet)$name=="Usagi, Aso")
which(V(actnet)$name=="Aso, Usagi")
acti[92]
actj[92]
casts[92]
movies[92]
movies[[92]]
## 2
movies[1]
movies[[1]]
casts[1]
casts[1]
casts[["Aso, Usagi"]]
casts[["Davi, Robert"]]
casts[[1]]
casts[1[1]]
casts[1][1]
casts[1][,1]
movies[1]
actnet["n881735"]
actnet("n881735")
actnet[1
]
actnet[,1]
actnet[1,1]
actnet[1,2]
actnet[,2]
actnet[1,]
actnet
actnet[1]
actnet(1)
actnet
which(V(actnet)$name=="Bacon, Kevin")
which(V(actnet)$name=="Bacon, Kevin")
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
degree(V(actnet)$name=="Bacon, Kevin")
degree(actnet["Bacon, Kevin"])
Aso <- graph.neighborhood(actnet, 1, V(actnet)["Aso, Usagi"])[[1]]
V(Aso)$color <- "gold"
V(Aso)["Aso, Usagi"]$color <- "red"
plot(Aso, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "gold"
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
plot(BaconKevin2, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "gold"
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
V(BaconKevin2)["Bacon, Kevin"]$vertex.size <- 15
plot(BaconKevin2, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "gold"
V(BaconKevin2)$vertex.size <- 3
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
V(BaconKevin2)["Bacon, Kevin"]$vertex.size <- 15
plot(BaconKevin2, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "gold"
V(BaconKevin2)$vertex.size =3
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
V(BaconKevin2)["Bacon, Kevin"]$vertex.size =3
plot(BaconKevin2, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)$vertex.size=10
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)$vertex.size=100
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)$vertex.size=1
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)$vertex.size=100
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)$vertex.size=10
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)["Bacon, Kevin"]$vertex.size=100
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin <- graph.neighborhood(actnet, 1, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin)$color <- "gold"
V(BaconKevin)$vertex.size=10
V(BaconKevin)["Bacon, Kevin"]$color <- "red"
V(BaconKevin)["Bacon, Kevin"]$vertex.label="KEVIN"
plot(BaconKevin, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
V(BaconKevin)["Bacon, Kevin"]$vertex.label="Kevin"
plot(BaconKevin, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
BaconKevin3 <- graph.neighborhood(actnet, 3, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin3)$color <- "gold"
V(BaconKevin3)["Bacon, Kevin"]$color <- "red"
plot(BaconKevin3, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
latimes2 <- graph.neighborhood(calink, 2, V(calink)["http://www.latimes.com/HOME/"])[[1]]
V(latimes2)$color <- "green"
V(latimes2)[V(latimes)$name]$color <- "gold"
V(latimes2)["http://www.latimes.com/HOME/"]$color <- "red"
plot(latimes2,  edge.arrow.width=0, edge.curved=FALSE,
vertex.label=NA, vertex.frame.color=0, vertex.size=6)
caedges <- read.csv("CaliforniaEdges.csv")
casites <- scan("CaliforniaNodes.txt", "character")
edgemat <- cbind(casites[caedges$from], casites[caedges$to])
## create a graph
calink <- graph.edgelist(edgemat)
latimes <- graph.neighborhood(calink, 1, V(calink)["http://www.latimes.com/HOME/"])[[1]]
V(latimes)$color <- "gold"
V(latimes)["http://www.latimes.com/HOME/"]$color <- "red"
plot(latimes, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75)
latimes2 <- graph.neighborhood(calink, 2, V(calink)["http://www.latimes.com/HOME/"])[[1]]
V(latimes2)$color <- "green"
V(latimes2)[V(latimes)$name]$color <- "gold"
V(latimes2)["http://www.latimes.com/HOME/"]$color <- "red"
plot(latimes2,  edge.arrow.width=0, edge.curved=FALSE,
vertex.label=NA, vertex.frame.color=0, vertex.size=6)
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "green"
V(BaconKevin2)[V(actnet)$name]$color <- "gold"
V(BaconKevin2)[V(actnet)"Bacon, Kevin"]$color <- "red"
V(BaconKevin2)[V(actnet)$name=="Bacon, Kevin"]$color <- "red"
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "green"
V(BaconKevin2)[V(actnet)$name]$color <- "gold"
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
labels(BaconKevin2)
V(actnet)$name
BaconKevin2 <- graph.neighborhood(actnet, 2, V(actnet)["Bacon, Kevin"])[[1]]
V(BaconKevin2)$color <- "green"
V(BaconKevin2)[V(BaconKevin)$name]$color <- "gold"
V(BaconKevin2)["Bacon, Kevin"]$color <- "red"
plot(BaconKevin2, vertex.label=NA, vertex.frame.color=0, edge.arrow.width=.75,edge.curved=FALSE)
abetween <- betweenness(actnet)
adegree <- degree(actnet)
which.max(abetween)
which.max(adegree)
plot(adegree,abetween,log="xy")
V(actnet)$name[order(betweenness(actnet), decreasing=TRUE)[1:10]]
V(actnet)$name[order(degree(actnet), decreasing=TRUE)[1:10]]
betweenness(actnet)["Neill, Sam"]
degree(actnet)["Neill, Sam"]
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.1))
inspect(ARules)
summary(movies)
dim(movies)
nrows(movies)
cast
casts
summary(casts)
15000*.001
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.1))
inspect(ARules)
nroles["Foley, Mick"]
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.05))
inspect(ARules)
ARules <- apriori(casttrans, parameter=list(support=.0005, confidence=.05))
inspect(ARules)
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=0))
inspect(ARules)
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.002))
inspect(ARules)
ARules <- apriori(casttrans, parameter=list(support=.001, confidence=.1))
inspect(ARules)
casts["Dalziel and Pascoe"]
casts["Dalziel & Pascoe"]
casts["Dalziel"*]
casts["Dalziel *"]
casts["Clarke, Warren"]
casts["A Clockwork Orange"]
casts["Top Secret!"]
casts["I.D."]
casts
casts["Greenfingers"]
casts["The Mystery of Men"]
casts["The Secret Agent"]
